{"version":3,"sources":["actions/index.js","actions/types.js","components/Landing.js","components/Payments.js","components/Header.js","components/App.js","reducers/index.js","reducers/authReducer.js","index.js"],"names":["fetchUser","dispatch","a","axios","get","res","type","payload","data","handleToken","token","post","Landing","style","textAlign","Payments","name","description","amount","props","stripeKey","process","className","Component","connect","actions","Header","this","auth","href","key","margin","credits","to","renderContent","state","Dashboard","SurveyNew","App","exact","path","component","combineReducers","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","console","log"],"mappings":"6YAcaA,EAAY,yDAAM,WAAMC,GAAN,eAAAC,EAAA,sEAEXC,IAAMC,IAAI,qBAFC,OAEvBC,EAFuB,OAG7BJ,EAAS,CAAEK,KCjBa,aDiBKC,QAASF,EAAIG,OAHb,2CAAN,uDAOZC,EAAc,SAAAC,GAAK,8CAAI,WAAMT,GAAN,eAAAC,EAAA,sEAChBC,IAAMQ,KAAK,cAAeD,GADV,OAC5BL,EAD4B,OAElCJ,EAAS,CAAEK,KCvBa,aDuBKC,QAASF,EAAIG,OAFR,2CAAJ,uDEVjBI,EATC,WACd,OACE,yBAAKC,MAAO,CAAEC,UAAW,YACvB,uCADF,qC,iBCCEC,E,uKACM,IAAD,OAEP,OACE,kBAAC,IAAD,CACEC,KAAK,SACLC,YAAY,yBACZC,OAAQ,IACRR,MAAO,SAAAA,GAAK,OAAI,EAAKS,MAAMV,YAAYC,IACvCU,UAAWC,+GAEX,4BAAQC,UAAU,OAAlB,oB,GAXeC,aAiBRC,cAAQ,KAAMC,EAAdD,CAAuBT,GCjBhCW,E,8KAGF,OACEC,KAAKR,MAAMS,MAEX,KAAK,KACH,OACF,KAAK,EACH,OACE,4BACE,uBAAGC,KAAK,gBAAR,sBAGN,QACE,MAAO,CACL,wBAAIC,IAAI,KACN,kBAAC,EAAD,OAEF,wBAAIA,IAAI,IAAIjB,MAAO,CAAEkB,OAAQ,WAA7B,WACWJ,KAAKR,MAAMS,KAAKI,SAE3B,wBAAIF,IAAI,KACN,uBAAGD,KAAK,eAAR,gB,+BAaR,OACE,6BACE,yBAAKP,UAAU,eAEb,kBAAC,IAAD,CACEW,GAAIN,KAAKR,MAAMS,KAAO,WAAa,IACnCN,UAAU,mBAFZ,UAMA,wBAAIA,UAAU,SAASK,KAAKO,uB,GA9CjBX,aAwDNC,mBAHf,SAAyBW,GACvB,MAAO,CAAEP,KAAMO,EAAMP,QAERJ,CAAyBE,GCrDlCU,EAAY,kBAAM,0CAClBC,EAAY,kBAAM,0CAElBC,E,kLAIFX,KAAKR,MAAMnB,c,+BAIX,OACE,yBAAKsB,UAAU,aACb,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAW7B,IACjC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,WAAWC,UAAWL,IACxC,kBAAC,IAAD,CAAOI,KAAK,eAAeC,UAAWJ,W,GAfhCd,aAuBHC,cAAQ,KAAMC,EAAdD,CAAuBc,GC/BvBI,cAAgB,CAC7Bd,KCFa,WAAgC,IAAvBO,EAAsB,uDAAd,KAAMQ,EAAQ,uCAG5C,OAAQA,EAAOrC,MACb,INNsB,aMOpB,OAAOqC,EAAOpC,UAAW,EAC3B,QACE,OAAO4B,MCEPS,EAAQC,YAAYC,EAAU,GAAIC,YAAgBC,MAExDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SAG1BC,QAAQC,IAAI,gBAAiBjC,+GAC7BgC,QAAQC,IAAI,iBAAkBjC,gB","file":"static/js/main.777abc50.chunk.js","sourcesContent":["import axios from \"axios\";\n// THIS ACTS AS AN ACTION TYPES.JS\n\nimport { FETCH_USER } from \"./types\";\n\n// export const fetchUser = () => {\n//   // this mean dispatch function only get call after axios fetch the needed data\n//   return function(dispatch) {\n//     axios\n//       .get(\"/api/current_user\")\n//       .then(res => dispatch({ type: FETCH_USER, payload: res }));\n//   };\n// };\n\nexport const fetchUser = () => async dispatch => {\n  // this mean dispatch function only get call after axios fetch the needed data\n  const res = await axios.get(\"/api/current_user\");\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n\n//update current credits of a user, then fetch that data to reflect on header component\nexport const handleToken = token => async dispatch => {\n  const res = await axios.post(\"/api/stripe\", token);\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n","export const FETCH_USER = \"fetch_user\";\n","import React from \"react\";\n\nconst Landing = () => {\n  return (\n    <div style={{ textAlign: \"center \" }}>\n      <h1>Emaily!</h1>\n      Collect feedback from your users\n    </div>\n  );\n};\n\nexport default Landing;\n","import React, { Component } from \"react\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass Payments extends Component {\n  render() {\n    //debugger;\n    return (\n      <StripeCheckout\n        name='Emaily'\n        description='$5 for 5 email credits'\n        amount={500}\n        token={token => this.props.handleToken(token)} // this is a callback function, similarly to onChange or onSubmit\n        stripeKey={process.env.REACT_APP_STRIPE_KEY}\n      >\n        <button className='btn'>Add credits</button>\n      </StripeCheckout>\n    );\n  }\n}\n\nexport default connect(null, actions)(Payments);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Payments from \"./Payments\";\n\nclass Header extends Component {\n  //Help method to determin the state of User log in or not\n  renderContent() {\n    switch (\n      this.props.auth //this is the model User????\n    ) {\n      case null:\n        return;\n      case false:\n        return (\n          <li>\n            <a href='/auth/google'>Login With Google</a>\n          </li>\n        );\n      default:\n        return [\n          <li key='1'>\n            <Payments />\n          </li>,\n          <li key='3' style={{ margin: \"0 10px\" }}>\n            Credits:{this.props.auth.credits}\n          </li>,\n          <li key='2'>\n            <a href='/api/logout'>Log Out</a>\n          </li>\n        ];\n      // return (\n      //   <React.Fragment>\n      //     <Payments /> <a href='/api/logout'>Log Out</a>\n      //   </React.Fragment>\n      // );\n    }\n  }\n\n  render() {\n    //console.log(this.props);\n    return (\n      <nav>\n        <div className='nav-wrapper'>\n          {/* Using ternary operator to direct to the appropriate route if a user is logged in */}\n          <Link\n            to={this.props.auth ? \"/surveys\" : \"/\"}\n            className='left brand-logo'\n          >\n            Emaily\n          </Link>\n          <ul className='right'>{this.renderContent()}</ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nfunction mapStatetoProps(state) {\n  return { auth: state.auth };\n}\nexport default connect(mapStatetoProps)(Header);\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nimport Landing from \"./Landing\";\nimport Header from \"../components/Header\";\n\nconst Dashboard = () => <h2>Dashboard</h2>;\nconst SurveyNew = () => <h2>SurveyNew</h2>;\n\nclass App extends Component {\n  componentDidMount() {\n    // Once every different actions get passed into the App.js, they are assigned to the App\n    // as PROPS, so now we can call the actions in actions-creator\n    this.props.fetchUser();\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <BrowserRouter>\n          <div>\n            <Header />\n            <Route exact path='/' component={Landing} />\n            <Route exact path='/surveys' component={Dashboard} />\n            <Route path='/survey/news' component={SurveyNew} />\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, actions)(App);\n","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducer\";\n\nexport default combineReducers({\n  auth: authReducer\n});\n","import { FETCH_USER } from \"../actions/types\";\n\nexport default function(state = null, action) {\n  // verify if action in the reducer is working\n  //console.log(action);\n  switch (action.type) {\n    case FETCH_USER:\n      return action.payload || false; // this is the User model/data\n    default:\n      return state;\n  }\n}\n","import \"materialize-css/dist/css/materialize.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n\nimport App from \"./components/App\";\nimport reducers from \"./reducers\";\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nconsole.log(\"STRIPE KEY IS\", process.env.REACT_APP_STRIPE_KEY);\nconsole.log(\"Environment is\", process.env.NODE_ENV);\n"],"sourceRoot":""}